<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Module('/FS/IOFS');
  $Loader->Load_Lib('/FS/Utils');

  class C_UE_Builder extends C_Object
  {
    Protected $Manager  ;
    Protected $Project  ;
    Protected $Engine   ;
    // ERROR: The platform name WindowsNoEditor is not a valid platform name. Valid names are
    Protected $Platform    ='Win64'; // Win32,Win64,HoloLens,Mac,XboxOne,PS4,IOS,Android,HTML5,Linux,AllDesktop,TVOS,Switch,Quail,Lumin
    Protected $CompileMode ='Shipping'; // Debug, DebugGame, Development, Test, Shipping
    Protected $CookFlavor  = ''; // =Multi
    Protected $NeedSource  = false;
    Protected $OutputFolder =Null;
    
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $this->Manager =$Args['Manager' ];
      $this->Project =$Args['Project' ];
      $this->Engine  =$Args['Engine'  ];
    }
    
    Function GetManager () { return $this->Manager ; }
  //Function GetEngine  () { return $this->NeedSource? $this->Engine->GetSource():$this->Engine; }
  //Function GetEngine  () { return ($Engine=$this->Engine)->GetSource()?? ($this->NeedSource? null:$Engine); }
    Function GetEngine  ()
    { 
      $Engine=$this->Engine;
      If(!$Engine) Return Null;
      $Source=$Engine->GetSource();
      If($Source) Return $Source;
      If(!$this->NeedSource) Return $Engine;
      $this->Log('Error', 'There is no source of engine');
      Return Null;
    }
    Function GetProject () { return $this->Project ; }
    
    Function GetOutputFolder() { return $this->OutputFolder; }
    
    Function SetOutputFolder($v) { CreatePath($this->OutputFolder=Static::RealPath($v)); }
    Function SetServer($v=true) { $this->Is_Server=$v; $this->No_Client=$v; if($v) $this->NeedSource=true; }
    Function SetEngine($v) { if($v=$this->GetManager()->GetEngine($v)) $this->Engine=$v; }
    Function SetPlatform($Platform, $f='')
    {
    //$this->Log('Debug', 'SetPlatform(', $Platform, ', ', $f,')');
      $this->Platform=$Platform; if($f) $this->CookFlavor=$f;
      if($Platform!=='Win64')
        $this->NeedSource=true;
      if($Platform!=='Win64' || $Platform==='Shipping')
      {
      //$this->Is_NoDebugInfo=false;
      //$this->CrashReporter=true;
      }
    }
    
    Function SetNoDebugInfo($v=true) { $this->Is_NoDebugInfo=$v; }
    
    Function SetCompileMode(String $v)
    {
      switch($v)
      {
      case 'Shipping'    :
      case 'Debug'       :
      case 'DebugGame'   :
      case 'Development' :
      case 'Test'        :
      case 'Shipping'    :
        $this->CompileMode=$v;
        break;
      default:
        $this->Log('Error', 'Unknown compile mode: ', $v);
      }
    }
    
    Static Function IsAbsolute($Path)
    {
      return StrLen($Path)>1 &&(
        SubStr($Path, 0, 1)=='/'   ||
      //SubStr($Path, 0, 1)=='\\'  ||
        SubStr($Path, 1, 1)==':'  // ||
      //SubStr($Path, 1, 1)=='.\\' ||
      //SubStr($Path, 0, 2)=='./'
      );      
    }
    
    Static Function RealPath($Path)
    {
      $Path=NormPath($Path);
      if(!Static::IsAbsolute($Path))
        $Path=NormPath(RealPath('./').'/'.$Path);
      return $Path;
    }
    
    Protected $DisabledArgs =[];
    Protected $AddArgs      =[];

    //TODO: Remove
    Protected $Op_Cook         =true  ;
    Protected $Op_Compile      =true  ;
    Protected $Op_Build        =true  ;
    Protected $Op_Stage        =true  ;
    Protected $Is_Compressed   =true  ;
    Protected $AllMaps         =true  ;
    Protected $Is_Server       =false ;
    Protected $No_Client       =false ;
    Protected $Is_PreReqs      =true  ;
    Protected $Is_Package      =true  ;
    Protected $Is_Distribution =true  ;
    Protected $StagingDir      =''    ;
    Protected $Is_NoDebugInfo  =false ;
    Protected $Is_Utf8Output   =false ;
    Protected $CrashReporter   =true  ;

    Function SetAddArgs($v) { $this->AddArgs=$v; }
    Function SetDisabledArgs($Args)
    {
      $List=[];
      ForEach($Args As $k=>$v)
      {
        If(Is_String($k))
          $List[StrToLower($k)]=$k;
        ElseIf(Is_String($v))
          $List[StrToLower($v)]=$v;
        Else
         $this->Log('Error', 'Wrong disable log ', $k, '=>', $v);
      }
      $this->DisabledArgs=$List;
    }
    
    Protected Function _Opt(&$Res, $k, $v=Null)
    {
      if(IsSet($this->DisabledArgs[StrToLower($k)])) return;
      $Res[]=Is_Null($v)? $k:$k.$v;
    }
    
    Function Start()
    {
    //$this->Log('Debug', 'Platform='   ,$this->Platform   );
    //$this->Log('Debug', 'NeedSource=' ,$this->NeedSource );
      $Engine=$this->GetEngine();
      If(!$Engine) Return;
      if(!$Engine->IsSource())
        $this->Op_Compile=False;
      $Cmd=$Engine->GetAutomationToolPath();
      $Opts=[
        'BuildCookRun',
      ];
      $this->_Opt($Opts, '-project=' , '"'.$this->GetProject()->GetFile().'"');
      $this->_Opt($Opts, '-noP4'    );
      $this->_Opt($Opts, '-platform='       ,$this->Platform);
      $this->_Opt($Opts, '-targetplatform=' ,$this->Platform);
      $this->_Opt($Opts, '-clientconfig='   ,$this->CompileMode);
      $this->_Opt($Opts, '-serverconfig='   ,$this->CompileMode);
      if($this->CookFlavor      ) $this->_Opt($Opts, '-cookflavor='    ,$this->CookFlavor);
      if($this->Op_Cook         ) $this->_Opt($Opts, '-cook'          );
      if($this->Is_Compressed   ) $this->_Opt($Opts, '-Compressed'    );
      if($this->AllMaps         ) $this->_Opt($Opts, '-allmaps'       ); //<TODO: Optional? Remove?
      if($this->Op_Build        ) $this->_Opt($Opts, '-build'         );
      if($this->Op_Compile      ) $this->_Opt($Opts, '-compile'       );
      if($this->Op_Stage        ) $this->_Opt($Opts, '-stage'         );
      if($this->Is_Server       ) $this->_Opt($Opts, '-server'        );
      if($this->No_Client       ) $this->_Opt($Opts, '-noclient'      );
      if($this->Is_PreReqs      ) $this->_Opt($Opts, '-prereqs'       );
      if($this->Is_Package      ) $this->_Opt($Opts, '-package'       );
      if($this->Is_NoDebugInfo  ) $this->_Opt($Opts, '-nodebuginfo'   );
      if($this->CrashReporter   ) $this->_Opt($Opts, '-crashreporter' );
      if($this->Is_Utf8Output   ) $this->_Opt($Opts, '-utf8output'    );
      if($this->Is_Distribution ) $this->_Opt($Opts, '-distribution'  );
      $this->_Opt($Opts, '-pak'     );
      $this->_Opt($Opts, '-archive' );
      $this->_Opt($Opts, '-archivedirectory=', $this->GetOutputFolder());

    # if($this->Manifests             ) $this->_Opt($Opts ,'-manifests'          );
    # if($this->CreateChunkInstall    ) $this->_Opt($Opts ,'-createchunkinstall' );
    # if($this->ChunkInstallDirectory ) $this->_Opt($Opts ,'-chunkinstalldirectory=' ,$this->ChunkInstallDirectory );
    # If($this->ChunkInstallVersion   ) $this->_Opt($Opts ,'-chunkinstallversion='   ,$this->ChunkInstallVersion   );

      if($StagingDir=$this->StagingDir)
        $this->_Opt($Opts, '-stagingdirectory=', $StagingDir); //TODO: Quotes
      
      ForEach($this->AddArgs As $Arg)
        $Opts[]=$Arg;
    //$Cmd=Implode(' ', $Opts);
      
      $Res=[];
      $Res[]='set Param=';
      ForEach($Opts As $Opt)
        $Res[]='set Param=%Param% '.$Opt;
      $Res[]='call "'.$Cmd.'" %Param%';
      $Res=Implode("\n", $Res);
      
      $Cmd=$this->GetOutputFolder().'/Build.bat';
      File_Put_Contents($Cmd, $Res);
      
      $Exec=$this->Create_Object('/System/Exec');
    //$Exec->Env=$_SERVER;
      
    //$Exec->Env['TestEnv']='Hello World';
      
    //$this->Log('Debug', 'Cmd: ',$Cmd);
    //return;
      $Exec->Command=$Cmd;
      $Exec->Execute();
      $Exec->Done();
    }
    
    Function _GetOutputDirBase()
    {
      switch($this->Platform)
      {
    # case 'Win32'      : return ['Windows' ,'NoEditor', 'Server'];
      case 'Win64'      : return ['Windows' ,'NoEditor', 'Server'];
    # case 'HoloLens'   :
    # case 'Mac'        : return ['Mac'     ,'NoEditor', 'Server'];
    # case 'XboxOne'    :
    # case 'PS4'        :
    # case 'IOS'        : return [$this->Platform.'_'.$this->CookFlavor, '', 'Server'];
      case 'Android'    : return [$this->Platform.'_'.$this->CookFlavor, '', 'Server'];
    # case 'HTML5'      :
    # case 'Linux'      : return ['Linux'    ,'NoEditor', 'Server'];
    # case 'AllDesktop' :
    # case 'TVOS'       :
    # case 'Switch'     :
    # case 'Quail'      :
    # case 'Lumin'      :
      }
      return ['Unknown', 'NoEditor', 'Server'];
    }
    
    Function GetOutputDirClient()
    {
      [$Base, $Client, $Server]=$this->_GetOutputDirBase();
      return $Res.$Client;
    }
    
    Function GetOutputDirServer()
    {
      [$Base, $Client, $Server]=$this->_GetOutputDirBase();
      return $Res.$Server;
    }
    
    Function GetOutputDirs()
    {
      [$Base, $Client, $Server]=$this->_GetOutputDirBase();
      $Res=[];
      $Res[]=$Res.$Client;
      if($this->Is_Server)
        $Res[]=$Res.$Server;
    }
    
    Function GetLogFiles()
    {
      $Path=$this->GetEngine()?->GetPath();
      If(!$Path) Return [];
      $Path.='/Engine/Programs/AutomationTool/Saved/Logs/';
      Return [
        $Path.'UBT-'.$this->GetProject()->GetName().'-'.$this->Platform.'-'.$this->CompileMode.'.txt',
        $Path.'Log.txt',
      ];
    }
    
    Function CopyLogs($To=False)
    {
      if($To===False)
        $To=$this->GetOutputFolder();
      ForEach($this->GetLogFiles() As $File)
        if(Is_File($File))
          Copy($File, $To.'/'.BaseName($File));
    }
  };
  
?>