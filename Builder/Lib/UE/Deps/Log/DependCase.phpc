<?  $Loader->Parent_Class('/UE/Deps/Log/Base');    class C_UE_Deps_Log_DependCase extends C_UE_Deps_Log_Base  {    Var $List=[];      Function Add($From, $Ref, $Need)    {      if(!IsSet($this->List[$From]))        $this->List[$From]=[          'Asset'=>$From,          'Case'=>[            $Need=>[$Ref=>true],          ],        ];      else        $this->List[$From]['Case'][$Need][$Ref]=true;    //echo '[Error] Different case of psth ', $Need, ' Actual: ', $Ref, "\n";    }        Function Save()    {      $Res=[];        $FromList=[];      ForEach($this->List as $Item)        $FromList[$Item['Asset']]=true;      $FromList=Array_Keys($FromList);      Sort($FromList);      Array_Push($Res, "Please fix follow assets:\n");      ForEach($FromList As $From)        Array_Push($Res, '  ', $From, "\n");                Array_Push($Res, "\n\nDetails:\n");      ForEach($this->List as $Item)      {        Array_Push($Res, '  Asset ',$Item['Asset'], "\n");        ForEach($Item['Case'] As $Need=>$References)        {          ForEach($References AS $Reference=>$Temp)            Array_Push($Res, '    Ref    ',$Reference, "\n");          Array_Push($Res, '      Need ',$Need, "\n");        }        Array_Push($Res, "\n");      }      $this->_Save('DependCase', Implode($Res));    }     Function Clear()    {      parent::Clear();      $this->List=[];    }  }?>