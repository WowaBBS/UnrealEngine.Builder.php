<?
  $this->Load_Lib('/FS/Utils');
//Require_Once 'Lib/Stream/tfile.php';
//Require_Once 'AssetTools.php';

  class C_UE_Deps_Asset extends C_Object
  {
    Var $Path      ;
    Var $Class     =''      ;
    Var $Ext       ='uasset';
    Var $Size      =0;
    Var $Changed   =0;
    Var $md5       ='';
    Var $Required  =~0; // ~0-Undefined, 0-Excluded, 1-Required
    Var $Content   ;
    Var $Numerated =Array();
    Var $Exists    = true;
  //Var $MoveTo    ; // Content
  
    Function SetSave($z)
    {
      if(!$this->Exists) return false;
      $Content    =$this->Content;
      $UE         =$Content->UE;
      $UE_Save    =$UE->Save    ;
      $UE_Content =$UE->Content ;
      if($Content!==$UE_Content &&
         $Content!==$UE_Save    )
        return false;
      if($z) $this->MoveTo($UE_Save    );
      else   $this->MoveTo($UE_Content );
    }
    
    Function Check_Numeration()
    {
      if(!$this->Exists) return false;
      $Path=$this->Path;
      $Pos=StrRPos($Path, '_');
      if($Pos===false) return false;
      $Num=SubStr($Path, $Pos+1);
      if(!CType_Digit($Num)) return false;
      if($Num[0]==='0') return false;
      $Path=SubStr($Path, 0, $Pos);
      $Idx=IntVal($Num);
      $Assets=&$this->Content->UE->Assets;
      if($Assets->Exists($Path))
        $Parent=$Assets->Get($Path);
      else
      {
        $Parent=$this->Create_Object('/UE/Deps/Asset', [
          'Content'  =>$this->Content ,
          'Path'     =>$Path ,
          'Ext'      =>''    ,
          'FilePath' =>''    ,
        ]);
        $Assets->Set($Parent);
      }
      $Parent->Numerated[$Idx]=$this;
      return true;
    }
    
    Function _Init($Args)
    {
      Parent::_Init($Args);
      $this->Content = $Content  =$Args['Content'  ];
      $this->Path    = $Path     =$Args['Path'     ];
      $this->Ext     = $Ext      =$Args['Ext'      ];
                       $FilePath =$Args['FilePath' ];
      $this->Exists  = $Exists   =$FilePath!=='';
      $this->Class   = FilePath_GetFileNick($Path).'_C';
 
      $FullPath=$this->_GetFilePath();
      if($Exists)
      {
        $this->Size    =FileSize  ($FilePath);
        $this->Changed =FileMTime ($FilePath);
        $Content->UE->_Check_Asset($FullPath, $Path);
      }
      $this->Required=$Content->UE->GetRequired($FullPath);
    //if($this->Required>=0)
    //  echo '[', $FullPath, '=', $this->Required, "\n";
    }
    
    Function _Done()
    {
      $this->Content   =null;
      $this->Numerated =null;
      Parent::_Done();
    }
    
    Function _GetFilePath()
    {
      $Res=$this->Path ;
      $Ext=$this->Ext  ;
      if($Ext!=='')
        $Res=$Res.'.'.$Ext;
      return $Res;
    }
    
    Function GetFilePath()
    {
      return $this->Content->GetFilePath($this->_GetFilePath());
    }
    
    Function _GetMD5()
    {
      return md5_file($this->GetFilePath());
    }
    
    Function GetMD5()
    {
      if(!$this->Exists) return '';
      $md5=&$this->md5;
      if($md5!=='')
        return $md5;
    //$md5=$this->Content->UE->Cache_MD5->CalcMD5($this->GetFilePath());
      $md5=$this->Content->UE->Cache_MD5->Get(
        $this->Path,
        $this->Size.','.$this->Changed,
        Array($this, '_GetMD5')
      );
      return $md5;
    }
    
    Function _GetStrings()
    {
      echo 'Load ',$this->Path, "\n";
      return Asset_ExtractStrings_ByFileName($this->GetFilePath());
    }
    
    Function GetStrings()
    {
      if(!$this->Exists)
        $Res=Array();
      else
        $Res=$this->Content->UE->Cache_Assets->Get(
          $this->_GetFilePath(),
          $this->GetMD5().'_V1x1',
          Array($this, '_GetStrings')
        );
      return $Res;
    }
 
    Function _GetInfo()
    {
      $Path=$this->Path;
      $Strs=$this->GetStrings();
      
      $Keys=Array(
        '/Script/BlueprintGraph'=>1,
      );
      
      $IsBlueprint=false;
      
      $Depend=Array();
      $Classes=Array();
      ForEach($Strs As $Str)
      {
        $Asset=ExtractAssetPath($Str);
        if($Asset!=='' && $Asset!==$Path)
          $Depend[$Asset]=True;
        if(IsAssetClass($Str))
          $Classes[$Str]=True;
        if(IsSet($Keys[$Str]))
          Switch($Keys[$Str])
          {
          case 1: $IsBlueprint=true;
          }
      }
      
      $Depend  =Array_Keys($Depend  ); Sort($Depend  );
      $Classes =Array_Keys($Classes ); Sort($Classes );
      
      $Res=Array(
        'Depend'      =>$Depend      ,
        'Classes'     =>$Classes     ,
        'IsBlueprint' =>$IsBlueprint ,
      );
      return $Res;
    }
    
    Function GetInfo()
    {
      if(!$this->Exists)  return Array();
 
      return $this->Content->UE->Cache_Info->Get(
        $this->Path,
        $this->GetMD5().'_V1x1',
        Array($this, '_GetInfo')
      );
    }
 
    Function GetDependSelf()
    {
      if(!$this->Exists) return Array();
      return $this->GetInfo()['Depend'];
    }
    
    Function GetDepend()
    {
      $Res=$this->GetDependSelf();
      $C=Count($Res);
      ForEach($this->Numerated As &$Asset)
        $Res[]=$Asset->Path;
      if($C!==Count($Res))
      {
        $Res=Array_Keys(Array_Flip($Res));
        Sort($Res);
      }
      return $Res;
    }
    
    Function GetClasses()
    {
      if(!$this->Exists) return Array();
      return $this->GetInfo()['Classes'];
    }
    
    Function MoveTo($NewContent)
    {
      if(!$this->Exists) return true;
      if($this->Content===$NewContent)
        return true;
      $NewFilePath=$NewContent->GetFilePath($this->_GetFilePath());
      if($NewFilePath==='')
        return false;
      $OldFilePath=$this->GetFilePath();
      $this->Content=$NewContent;
      CreatePath(GetDirPath($NewFilePath));
      echo 'Move ', $this->Path, "\n";
      return ReName($OldFilePath, $NewFilePath);
    }
  }
   
?>